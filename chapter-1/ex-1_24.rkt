#lang scheme

(define (square x)(* x x))



(define (next number) (if(= number 2) 3 (+ number 2)))

(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m)) m))
        (else
         (remainder (* base (expmod base (- exp 1) m)) m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))


(define (timed-prime-test n m)
  (newline)
  (start-prime-test n m (current-inexact-milliseconds)))


(define (start-prime-test n m start-time)
  (if (> n m) (display "done")
      ( if (fast-prime? n 3)
      (report-prime (- (current-inexact-milliseconds) start-time) n m)
      (start-prime-test (+ n 2) m (current-inexact-milliseconds) )
      )))

(define (report-prime elapsed-time n m)
  (display n)
  (display " is prime ")
(display elapsed-time)
  (display " ")
  ( if(< n m)
  (start-prime-test (+ n 2) m (current-inexact-milliseconds) ) ( display "done"))
  )

(define (search_for_primes n m)
  (if (= (remainder n 2) 0) (timed-prime-test (+ n 1) m) (timed-prime-test n m)
      ))

(search_for_primes 1000 1020)
(search_for_primes 10000 10038)
(search_for_primes 100000 100044)
(search_for_primes 1000000 1000038)


;We see that the trend of root(10) is being roughly followed.
;1009 is prime 0.00390625 1013 is prime 0.00390625 1019 is prime 0.004150390625 done
;10007 is prime 0.008056640625 10009 is prime 0.007080078125 10037 is prime 0.005126953125 done
;100003 is prime 0.006103515625 100019 is prime 0.007080078125 100043 is prime 0.007080078125 done

;the results for numbers with twice the digits is roughly twice as compared to othher runtime value
;this follows the values generated by applying logarithm.
